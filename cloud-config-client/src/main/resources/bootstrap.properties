

server.port=1031

#spring.application.name：对应前配置文件中的{application}部分
#spring.cloud.config.profile：对应前配置文件中的{profile}部分
#spring.cloud.config.label：对应前配置文件的git分支
#spring.cloud.config.uri：配置中心的地址

#############################################################
    #配置中心的地址一定要放在bootstrap.properties中，这个配置文件是由“根”上下文优先加载，可以保证程序启动之初就感知到远程配置中心的存在，并从远程获取配置，随后继续启动系统，这点十分重要。
    #而application.properties是由子上下文加载，加载顺序低于前者，如果配置中心地址放在这里，并且你远程配置了一些启动相关的必要参数，那么，你的程序很可能由于缺少参数而启动失败。
#############################################################


###################    定位Git中的资源    ##################
spring.application.name=CONFIG-CLIENT
#如果不配置config.name,系统默认读取spring.application.name
spring.cloud.config.name=service-a-config
#如果不配置profile，系统默认default，即：${spring.application.name}.properties
#我们一般的做法是，在系统启动的时候，用命令行传入--spring.cloud.config.profile=dev|prod|test的方式，因为在启动的时候，我们是明确知道我要获取哪套配置的。
spring.cloud.config.profile=dev
spring.cloud.config.label=master
# 下面制定了通过服务来访问ConfigServer，就不需要uri了
#spring.cloud.config.uri=http://127.0.0.1:1014/
##########################################################


#开启通过服务来访问Config Server的功能
spring.cloud.config.discovery.enabled=true
#指定Config Server注册的服务名
spring.cloud.config.discovery.service-id=CONFIG-SERVER

#指定服务注册中心
eureka.client.service-url.defaultZone=http://127.0.0.1:8761/eureka/

# 关闭权限验证
management.security.enabled=false

